from django.db import models

# Create your models here.
class UserAccount(models.Model):
    account_name = models.CharField(max_length = 30)    #models.CharField requires the max_length paramater
    account_weight = models.IntegerField()

    class Meta: 
        ordering = ['id']    #orders by primary key, which is generated by default. We can adjust that ourselves if we want but I don't see a need at this time. 

    def __str__(self):
        return self.account_name

class Trip(models.Model):
    trip_name = models.CharField(max_length = 30)
    trip_start_point = models.FloatField()
    trip_end_point = models.FloatField()
    trip_account = models.ForeignKey(
        UserAccount,
        on_delete = models.CASCADE, 
    )

    class Meta:
        ordering = ['id']

    def __str__(self):
        return self.trip_name

class Inventory(models.Model):
    inventory_name = models.CharField(max_length = 30)
    inventory_weight = models.IntegerField()
    inventory_account = models.ForeignKey(
        UserAccount,
        on_delete = models.CASCADE,
    )
    inventory_trip = models.ForeignKey(
        Trip,
        on_delete = models.CASCADE,
        blank = True,
        null = True
    )

    class Meta: 
        ordering = ['id']

    def __str__(self):
        return self.inventory_name

class MealPlan(models.Model):
    mealplan_name = models.CharField(max_length = 30)
    mealplan_datetime = models.TextField()
    mealplan_account = models.ForeignKey(
        UserAccount,
        on_delete = models.CASCADE,
    )
    mealplan_trip = models.ForeignKey(
        Trip,
        on_delete = models.CASCADE,
        blank = True,
        null = True
    )

    class Meta: 
        ordering = ['id']

    def __str__(self):
        return self.mealplan_name

class Meal(models.Model):
    meal_name = models.CharField(max_length = 30)
    meal_datetime = models.CharField(max_length = 30)
    meal_mealplan = models.ForeignKey(
        MealPlan,
        on_delete = models.CASCADE,
    )

    class Meta: 
        ordering = ['id']

    def __str__(self):
        return self.meal_name

class EssentialItem(models.Model):
    essentialitem_account = models.ForeignKey(
        UserAccount,
        on_delete = models.CASCADE,
    )

    class Meta: 
        ordering = ['id']

class FavoriteItem(models.Model):
    favoriteitem_account = models.ForeignKey(
        UserAccount,
        on_delete = models.CASCADE,
    )

    class Meta: 
        ordering = ['id']

class Location(models.Model):
    location_name = models.CharField(max_length = 30)
    location_elevation = models.IntegerField()
    location_difficulty = models.IntegerField()
    location_description = models.TextField()
    location_trip = models.ForeignKey(
        Trip,
        on_delete = models.CASCADE,
        blank = True,
        null = True
    )
    location_account = models.ForeignKey(
        Trip,
        related_name='location_account_id',
        on_delete = models.CASCADE,
    )

    class Meta: 
        ordering = ['id']

    def __str__(self):
        return self.location_name

class Item(models.Model):
    item_name = models.CharField(max_length = 30)
    item_weight = models.IntegerField()
    item_category = models.CharField(max_length = 30)
    item_quantity = models.IntegerField()
    item_description = models.TextField()
    item_inventory = models.ForeignKey(
        Inventory,
        related_name = 'item',
        on_delete = models.CASCADE,
        blank = True,
        null = True
    )
    item_favorite_list = models.ForeignKey(
        FavoriteItem,
        on_delete = models.CASCADE,
        blank = True,
        null = True
    )
    item_essentialitem = models.ForeignKey(
        EssentialItem,
        on_delete = models.CASCADE,
        blank = True,
        null = True
    )

    class Meta: 
        ordering = ['id']

    def __str__(self):
        return self.item_name

    def __unicode__(self):
        return '%d: %s' % (self.pk, self.item_name)

class NutritionData(models.Model):
    calories = models.IntegerField()
    protein = models.IntegerField()
    sugar = models.IntegerField()
    nutritiondata_item = models.OneToOneField(
        Item,
        on_delete = models.CASCADE,
        primary_key=True
    )
